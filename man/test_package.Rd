% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load-dev.R
\name{test_package}
\alias{test_package}
\alias{t}
\title{Run package tests and show test coverage results}
\usage{
test_package(
  filter = NULL,
  path = ".",
  test_dir = "tests/testthat",
  reporter = NULL,
  clean = FALSE,
  local_install = TRUE,
  show_coverage = TRUE,
  coverage_report = FALSE,
  show_coverage_report = coverage_report && interactive()
)

t(
  filter = NULL,
  path = ".",
  test_dir = "tests/testthat",
  reporter = NULL,
  clean = FALSE,
  local_install = TRUE,
  show_coverage = TRUE,
  coverage_report = FALSE,
  show_coverage_report = coverage_report && interactive()
)
}
\arguments{
\item{filter}{Regular expression to filter both the test files (via the
`filter` argument of [testthat::test_dir()]), and the source files
in the coverage results.}

\item{path}{Path to the package tree.}

\item{test_dir}{Test directory to use. Defaults to `tests/testthat`
within the package tree.}

\item{reporter}{The testthat reporter to use. Passed to
[testthat::test_dir()].}

\item{clean}{Whether to delete the build directory before the build.}

\item{local_install}{Whether to install the built package into a local
library and add that library to the beginning of the library path.}

\item{show_coverage}{Whether to show code coverage results.}

\item{coverage_report}{Whether to generate a HTML test coverage report.}

\item{show_coverage_report}{Whether to show the HTML test coverage
report (if `coverage_report` is `TRUE`).}
}
\value{
A list of class `package_coverage` with entries:
  - `setup`: Build setup, see [load_package()].
  - `plan`: Build plan, see [load_package()].
  - `load`: Return value of [pkgload::load_all()].
  - `coverage`: Code coverage results. Columns:
    - `path`: Relative path to the R code file.
    - `symbol`: The R variable that is used to collect the coverage for
      this file.
    - `line_count`: Total number of lines in the file.
    - `code_lines`: Number of code lines (that are not excluded).
    - `lines_covered`: The number of covered lines will be stored here
      after a test coverage run. For `load_package()` it is all zero.
    - `percent_covered`: The test coverage percentage of the file will
      be stored here after a test coverage run. For `load_package()` it is
      all zero.
    - `lines`: A list column with a data frame for each file. The data
      frame has columns:
      - `lines`: The code line.
      - `status`: Whether this line is `"instrumented"`, `"noncode"` or
        `"excluded"`.
      - `id` The id of the counter that applies to this line. Often the
        same as the line number, but not always, e.g. for multi-line
        expressions. `NA` for lines that are not `"instrumented"`.
      - `coverage`: The number of times the line was covered will be filled
        in here after a test coverage run. For `load_package()` it is zero,
        but `NA` for lines that are not `"instrumented"`.
  - `test_results`: Return value of [testthat::test_dir()].
}
\description{
Run package tests and show test coverage results
}
\details{
Performs the following steps:
- Builds the package in a build directory, or updates the most recent
  build, if there is one.
- Loads the package from the build directory using [pkgload::load_all()].
- Installs the package into a local library (by default).
- Runs the package tests.
- Calculates and shows the test coverage of the package's source files.

`t()` is an alias of `test_package()`.
}
